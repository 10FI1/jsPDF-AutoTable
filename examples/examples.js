/*
 |--------------------------------------------------------------------------
 | This file contains examples of how to use this plugin
 |--------------------------------------------------------------------------
 |
 | To see what the documents generated by these examples looks like you can open
 | ´examples.html´ or go to http://simonbengtsson.github.io/jsPDF-AutoTable.
 |
 | To make it possible to view each example in examples.html some extra code
 | are added to the examples below. For example they return their jspdf
 | doc instance and gets generated data from the library faker.js. However you
 | can of course use this plugin how you wish and the simplest first example
 | below would look like this without any extras:
 |
 | var columns = ["ID", "Name", "Age", "City"];
 |
 | var data = [
 |     [1, "Jonathan", 25, "Gothenburg"],
 |     [2, "Simon", 23, "Gothenburg"],
 |     [3, "Hanna", 21, "Stockholm"]
 | ];
 |
 | var doc = new jsPDF('p', 'pt');
 | doc.autoTable(columns, data);
 | doc.save("table.pdf");
 |
 */

var faker = window.faker;
var base64Img = null;

var examples = {};

// Basic - shows what a default table looks like
examples.basic = function () {
    var doc = new jsPDF();
    doc.autoTable({head: head(), body: body()});
    return doc;
};

// From html - shows how pdf tables can be be drawn from html tables
examples.html = function () {
    var doc = new jsPDF();
    doc.text("From HTML", 14, 16);
    doc.autoTable({fromHtml: '.table', startY: 20});
    var finalY = doc.previousAutoTable.finalY;
    doc.text("From HTML with CSS", 14, finalY + 15);
    doc.autoTable({
        startY: finalY + 20,
        fromHtml: '.table', 
        useCss: true,
    });
    return doc;
};

// Minimal - shows how compact tables can be drawn
examples.minimal = function () {
    var doc = new jsPDF();
    doc.autoTable({
        head: head(), 
        body: body(),
        tableWidth: 'wrap',
        styles: {cellPadding: 0.5, fontSize: 8}
    });
    return doc;
};

// Long data - shows how the overflow features looks and can be used
examples.long = function () {
    var doc = new jsPDF('l');
    doc.text(7, 15, "Overflow 'ellipsize' (default)");
    doc.autoTable(20, {
        head: head(true),
        body: body(3, true),
        margin: {horizontal: 7},
        styles: {minCellWidth: 'wrap'},
        columnStyles: {text: {minCellWidth: 'auto'}}
    });
    doc.text("Overflow 'hidden'", 7, doc.previousAutoTable.finalY + 10);
    doc.autoTable({
        startY: doc.autoTable.previous.finalY + 15,
        head: head(true),
        body: body(3, true),
        margin: {horizontal: 7},
        styles: {overflow: 'hidden', minCellWidth: 'wrap'},
        columnStyles: {text: {minCellWidth: 'auto'}}
    });

    doc.text("Overflow 'linebreak'", 7, doc.previousAutoTable.finalY  + 10);
    doc.autoTable({
        startY: doc.autoTable.previous.finalY + 15,
        head: head(true),
        body: body(3, true),
        margin: {horizontal: 7},
        bodyStyles: {valign: 'top'},
        styles: {overflow: 'linebreak', minCellWidth: 'wrap'},
        columnStyles: {text: {minCellWidth: 'auto'}}
    });

    return doc;
};

// Content - shows how tables can be integrated with any other pdf content
examples.content = function () {
    var doc = new jsPDF();

    doc.setFontSize(18);
    doc.text('A story about a person', 14, 22);
    doc.setFontSize(11);
    doc.setTextColor(100);
    var text = doc.splitTextToSize(shuffleSentence(faker.lorem.words(55)) + '.', doc.internal.pageSize.width - 35, {});
    doc.text(text, 14, 30);

    doc.autoTable({
        head: head(),
        body: body(40),
        startY: 50, 
        showHead: 'firstPage'
    });

    doc.text(text, 14, doc.autoTable.previous.finalY + 10);

    return doc;
};

// Multiple - shows how multiple tables can be drawn both horizontally and vertically
examples.multiple = function () {
    var doc = new jsPDF();
    doc.setFontSize(22);
    doc.text("Multiple tables", 14, 20);
    doc.setFontSize(12);

    doc.autoTable(30, {head: head(), body: body(25)});

    doc.autoTable({
        head: head(), body: body(15),
        startY: 240,
        showHead: 'firstPage',
        margin: {right: 107}
    });
    
    doc.setPage(1 + doc.internal.getCurrentPageInfo().pageNumber - doc.autoTable.previous.pageCount);

    doc.autoTable({
        head: head(), 
        body: body(15),
        startY: 240,
        showHead: 'firstPage',
        margin: {left: 107}
    });

    for (var j = 0; j < 6; j++) {
        doc.autoTable({
            head: head(), 
            body: body(9),
            startY: doc.autoTable.previous.finalY + 10,
            avoidTableSplit: true,
        });
    }

    return doc;
};

// Header and footers - shows how header and footers can be drawn
examples['header-footer'] = function () {
    var doc = new jsPDF();
    var totalPagesExp = "{total_pages_count_string}";

    doc.autoTable({
        head: head(), 
        body: body(40),
        eventHandler: function(event) {
            if (event.name === 'endedPage') {
                // Header
                doc.setFontSize(20);
                doc.setTextColor(40);
                doc.setFontStyle('normal');
                if (base64Img) {
                    doc.addImage(base64Img, 'JPEG', event.settings.margin.left, 15, 10, 10);
                }
                doc.text("Report", event.settings.margin.left + 15, 22);

                // Footer
                var str = "Page " + event.pageCount;
                // Total page number plugin only available in jspdf v1.0+
                if (typeof doc.putTotalPages === 'function') {
                    str = str + " of " + totalPagesExp;
                }
                doc.setFontSize(10);
                doc.text(str, event.settings.margin.left, doc.internal.pageSize.height - 10);
            }
        },
        margin: {top: 30}
    });

    // Total page number plugin only available in jspdf v1.0+
    if (typeof doc.putTotalPages === 'function') {
        doc.putTotalPages(totalPagesExp);
    }

    return doc;
};

// Minimal - shows how compact tables can be drawn
examples.defaults = function () {
    // Global defaults
    jsPDF.autoTableSetDefaults({
        columnStyles: {id: {fontStyle: 'bold'}},
        headStyles: {fillColor: 0},
    });

    var doc = new jsPDF();

    // Document defaults
    doc.autoTableSetDefaults({
        headStyles: {fillColor: [155, 89, 182]}, // Purple
        margin: {top: 25},
        addPageContent: function(data) {
            doc.setFontSize(20);
            doc.text('Document specific header', data.settings.margin.left, 20);
        }
    });

    doc.autoTable({head: head(), body: body()});

    doc.addPage();

    doc.autoTable({
        head: head(), 
        body: body(),
        // Will override document and global headerStyles
        headStyles: {fillColor: [231, 76, 60]} // Red
    });

    // Reset defaults
    doc.autoTableSetDefaults(null);
    jsPDF.autoTableSetDefaults(null);

    return doc;
};

// Column styles - shows how tables can be drawn with specific column styles
examples.colstyles = function () {
    var doc = new jsPDF();
    doc.autoTable({
        head: head(), 
        body: body(),
        showHead: false,
        columnStyles: {
            id: {fillColor: [41, 128, 185], textColor: 255, fontStyle: 'bold'}
        }
    });
    return doc;
};


// Custom style - shows how custom styles can be applied to tables
examples.spans = function () {
    var doc = new jsPDF('p', 'pt');
    doc.setFontSize(12);
    doc.setTextColor(0);
    doc.setFontStyle('bold');
    doc.text('Col and row span', 40, 50);
    var data = body(80);
    data.sort(function (a, b) {
        return parseFloat(b.expenses) - parseFloat(a.expenses);
    });
    doc.autoTable({
        head: head(), 
        body: data,
        theme: 'grid',
        startY: 60,
        drawRow: function (row, data) {
            // Colspan
            doc.setFontStyle('bold');
            doc.setFontSize(10);
            if (row.index === 0) {
                doc.setTextColor(200, 0, 0);
                doc.rect(data.settings.margin.left, row.y, data.table.width, 20, 'S');
                doc.autoTableText("Priority Group", data.settings.margin.left + data.table.width / 2, row.y + row.height / 2, {
                    halign: 'center',
                    valign: 'middle'
                });
                data.cursor.y += 20;
            } else if (row.index === 5) {
                doc.rect(data.settings.margin.left, row.y, data.table.width, 20, 'S');
                doc.autoTableText("Other Groups", data.settings.margin.left + data.table.width / 2, row.y + row.height / 2, {
                    halign: 'center',
                    valign: 'middle'
                });
                data.cursor.y += 20;
            }

            if (row.index % 5 === 0) {
                var posY = row.y + row.height * 6 + data.settings.margin.bottom;
                if (posY > doc.internal.pageSize.height) {
                    data.addPage();
                }
            }
        },
        drawCell: function (cell, data) {
            // Rowspan
            if (data.column.dataKey === 'id') {
                if (data.row.index % 5 === 0) {
                    doc.rect(cell.x, cell.y, data.table.width, cell.height * 5, 'S');
                    doc.autoTableText(data.row.index / 5 + 1 + '', cell.x + cell.width / 2, cell.y + cell.height * 5 / 2, {
                        halign: 'center',
                        valign: 'middle'
                    });
                }
                return false;
            }
        }
    });
    return doc;
};

// Themes - shows how the different themes looks
examples.themes = function () {
    var doc = new jsPDF();
    doc.setFontSize(12);
    doc.setFontStyle('bold');

    doc.text('Theme "striped"', 14, 16);
    doc.autoTable({head: head(), body: body(5), startY: 20});

    doc.text('Theme "grid"', 14, doc.autoTable.previous.finalY + 10);
    doc.autoTable({head: head(), body: body(5), startY: doc.autoTable.previous.finalY + 14, theme: 'grid'});

    doc.text('Theme "plain"', 14, doc.autoTable.previous.finalY + 10);
    doc.autoTable({head: head(), body: body(5), startY: doc.autoTable.previous.finalY + 14, theme: 'plain'});

    return doc;
};

// Custom style - shows how custom styles can be applied
examples.custom = function () {
    var doc = new jsPDF();
    doc.autoTable({
        head: head(), body: body(),
        tableLineColor: [189, 195, 199],
        tableLineWidth: 0.75,
        styles: {
            font: 'courier',
            lineColor: [44, 62, 80],
            lineWidth: 0.75
        },
        headStyles: {
            fillColor: [44, 62, 80],
            fontSize: 15
        },
        bodyStyles: {
            fillColor: [52, 73, 94],
            textColor: 240
        },
        alternateRowStyles: {
            fillColor: [74, 96, 117]
        },
        columnStyles: {
            email: {
                fontStyle: 'bold'
            }
        },
    });
    return doc;
};

/*
 |--------------------------------------------------------------------------
 | Below is some helper functions for the examples
 |--------------------------------------------------------------------------
 */

function head(includeText) {
    let row = {id: 'ID', name: 'Name', email: 'Email', city: 'City', expenses: 'Expenses'};
    if (includeText) {
        row['text'] = 'Text';
    }
    return [row];
}

function foot(includeText) {
    let row = {id: 'ID', name: 'Name', email: 'Email', city: 'City', expenses: 'Expenses'};
    if (includeText) {
        row['text'] = 'Text';
    }
    return [row, row];
}

function body(rowCount, includeText) {
    rowCount = rowCount || 10;
    let body = [];
    var sentence = faker.lorem.words(20);
    for (var j = 1; j <= rowCount; j++) {
        let row = {
            id: j,
            name: faker.name.findName(),
            email: faker.internet.email(),
            city: faker.address.city(),
            expenses: faker.finance.amount(),
        };
        if (includeText) {
            row['text'] = shuffleSentence(sentence);
        }
        body.push(row);
    }
    return body;
}

function shuffleSentence(words) {
    if (typeof words === 'string') return words;
    words = words || faker.lorem.words(8);
    var str = faker.helpers.shuffle(words).join(' ').trim();
    return str.charAt(0).toUpperCase() + str.slice(1);
}

imgToBase64('document.jpg', function(base64) {
    base64Img = base64;
});

// You could either use a function similar to this or pre convert an image with for example http://dopiaza.org/tools/datauri
// http://stackoverflow.com/questions/6150289/how-to-convert-image-into-base64-string-using-javascript
function imgToBase64(url, callback) {
    if (!window.FileReader) {
        callback(null);
        return;
    }
    var xhr = new XMLHttpRequest();
    xhr.responseType = 'blob';
    xhr.onload = function() {
        var reader = new FileReader();
        reader.onloadend = function() {
            callback(reader.result.replace('text/xml', 'image/jpeg'));
        };
        reader.readAsDataURL(xhr.response);
    };
    xhr.open('GET', url);
    xhr.send();
}