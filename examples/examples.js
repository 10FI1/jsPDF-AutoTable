/*
 |--------------------------------------------------------------------------
 | This file contains examples of how to use this plugin
 |--------------------------------------------------------------------------
 |
 | To see what the documents generated by these examples looks like you can open
 | ´examples.html´ or go to http://simonbengtsson.github.io/jsPDF-AutoTable.
 |
 | To make it possible to view each example in examples.html some extra code
 | are added to the examples below. For example they return their jspdf
 | doc instance and gets generated data from the library faker.js. However you
 | can of course use this plugin how you wish and the simplest first example
 | below would look like this without any extras:
 |
 | var columns = ["ID", "Name", "Age", "City"];
 |
 | var data = [
 |     [1, "Jonathan", 25, "Gothenburg"],
 |     [2, "Simon", 23, "Gothenburg"],
 |     [3, "Hanna", 21, "Stockholm"]
 | ];
 |
 | var doc = new jsPDF();
 | doc.autoTable(columns, data);
 | doc.save("table.pdf");
 |
 */

var faker = window.faker;
var base64Img = null;

var examples = {};

// Basic - shows what a default table looks like
examples.basic = function () {
    var doc = new jsPDF();
    doc.autoTable({head: headRows(), body: bodyRows()});
    return doc;
};

// From html - shows how pdf tables can be be drawn from html tables
examples.html = function () {
    var doc = new jsPDF();
    doc.text("From HTML", 14, 16);
    doc.autoTable({fromHtml: '.table', startY: 20});
    var finalY = doc.previousAutoTable.finalY;
    doc.text("From HTML with CSS", 14, finalY + 15);
    doc.autoTable({
        startY: finalY + 20,
        fromHtml: '.table', 
        useCss: true,
    });
    return doc;
};

// Minimal - shows how compact tables can be drawn
examples.minimal = function () {
    var doc = new jsPDF();
    doc.autoTable({
        head: headRows(),
        body: bodyRows(),
        tableWidth: 'wrap',
        styles: {cellPadding: 0.5, fontSize: 8}
    });
    return doc;
};

// Long data - shows how the overflow features looks and can be used
examples.long = function () {
    var doc = new jsPDF('l');
    doc.text("Overflow 'ellipsize'", 14, 15);
    let head = headRows();
    head[0]['text'] = 'Text';
    let body = bodyRows(4);
    body.forEach(function(row) {row['text'] = faker.lorem.sentence(20)});
    doc.autoTable(20, {
        head: head,
        body: body,
        styles: {overflow: 'ellipsize', cellWidth: 'wrap'},
        columnStyles: {text: {cellWidth: 'auto'}}
    });
    doc.text("Overflow 'hidden'", 14, doc.previousAutoTable.finalY + 10);
    doc.autoTable({
        startY: doc.autoTable.previous.finalY + 15,
        head: head,
        body: body,
        styles: {overflow: 'hidden', cellWidth: 'wrap'},
        columnStyles: {text: {cellWidth: 'auto'}}
    });

    doc.text("Overflow 'linebreak' (default)", 14, doc.previousAutoTable.finalY  + 10);
    doc.autoTable({
        startY: doc.autoTable.previous.finalY + 15,
        head: head,
        body: body,
        bodyStyles: {valign: 'top'},
        styles: {overflow: 'linebreak', cellWidth: 'wrap'},
        columnStyles: {text: {cellWidth: 'auto'}}
    });

    return doc;
};

// Content - shows how tables can be integrated with any other pdf content
examples.content = function () {
    var doc = new jsPDF();

    doc.setFontSize(18);
    doc.text('With content', 14, 22);
    doc.setFontSize(11);
    doc.setTextColor(100);
    var text = doc.splitTextToSize(faker.lorem.sentence(45), doc.internal.pageSize.width - 35, {});
    doc.text(text, 14, 30);

    doc.autoTable({
        head: headRows(),
        body: bodyRows(40),
        startY: 50, 
        showHead: 'firstPage'
    });

    doc.text(text, 14, doc.autoTable.previous.finalY + 10);

    return doc;
};

// Multiple - shows how multiple tables can be drawn both horizontally and vertically
examples.multiple = function () {
    var doc = new jsPDF();
    doc.setFontSize(22);
    doc.text("Multiple tables", 14, 20);
    doc.setFontSize(12);

    doc.autoTable(30, {head: headRows(), body: bodyRows(25)});
    
    let pageNumber = doc.internal.getCurrentPageInfo().pageNumber;

    doc.autoTable({
        head: headRows(), body: bodyRows(15),
        startY: 240,
        showHead: 'firstPage',
        styles: {overflow: 'hidden'},
        margin: {right: 107}
    });
    
    doc.setPage(pageNumber);

    doc.autoTable({
        head: headRows(),
        body: bodyRows(15),
        startY: 240,
        showHead: 'firstPage',
        styles: {overflow: 'hidden'},
        margin: {left: 107}
    });

    for (var j = 0; j < 3; j++) {
        doc.autoTable({
            head: headRows(), 
            body: bodyRows(),
            startY: doc.autoTable.previous.finalY + 10,
            avoidTableSplit: true,
        });
    }

    return doc;
};

// Header and footers - shows how header and footers can be drawn
examples['header-footer'] = function () {
    var doc = new jsPDF();
    var totalPagesExp = "{total_pages_count_string}";

    doc.autoTable({
        head: headRows(), 
        body: bodyRows(40),
        eventHandler: function(event) {
            if (event.type === 'endedPage') {
                // Header
                doc.setFontSize(20);
                doc.setTextColor(40);
                doc.setFontStyle('normal');
                if (base64Img) {
                    doc.addImage(base64Img, 'JPEG', event.settings.margin.left, 15, 10, 10);
                }
                doc.text("Report", event.settings.margin.left + 15, 22);

                // Footer
                var str = "Page " + event.pageCount;
                // Total page number plugin only available in jspdf v1.0+
                if (typeof doc.putTotalPages === 'function') {
                    str = str + " of " + totalPagesExp;
                }
                doc.setFontSize(10);
                doc.text(str, event.settings.margin.left, doc.internal.pageSize.height - 10);
            }
        },
        margin: {top: 30}
    });

    // Total page number plugin only available in jspdf v1.0+
    if (typeof doc.putTotalPages === 'function') {
        doc.putTotalPages(totalPagesExp);
    }

    return doc;
};

// Minimal - shows how compact tables can be drawn
examples.defaults = function () {
    // Global defaults
    // (would apply to all documents if more than one were created)
    jsPDF.autoTableSetDefaults({
        columnStyles: {id: {fontStyle: 'bold'}},
        headStyles: {fillColor: 0},
    });

    var doc = new jsPDF();

    // Document defaults
    doc.autoTableSetDefaults({
        headStyles: {fillColor: [155, 89, 182]}, // Purple
        margin: {top: 25},
        addPageContent: function(data) {
            doc.setFontSize(20);
            doc.text('Default options', data.settings.margin.left, 20);
        }
    });

    doc.autoTable({head: headRows(), body: bodyRows()});

    doc.addPage();

    doc.autoTable({
        head: headRows(), 
        body: bodyRows(),
        // Will override document and global head tyles
        headStyles: {fillColor: [231, 76, 60]} // Red
    });

    // Reset defaults
    doc.autoTableSetDefaults(null);
    jsPDF.autoTableSetDefaults(null);

    return doc;
};

// Column styles - shows how tables can be drawn with specific column styles
examples.colstyles = function () {
    var doc = new jsPDF();
    doc.autoTable({
        head: headRows(), 
        body: bodyRows(),
        showHead: false,
        // Note that the "id" key below is the same as the column's dataKey used in 
        // the head and body rows. If your data is in array based instead you can 
        // use index based selector instead: `columnStyles: {0: {fillColor: [41, 128, 185], ...}}`
        columnStyles: {
            id: {fillColor: [41, 128, 185], textColor: 255, fontStyle: 'bold'}
        }
    });
    return doc;
};


// Col spans and row spans
examples.spans = function() {
    var doc = new jsPDF('p', 'pt');
    doc.setFontSize(12);
    doc.setTextColor(0);
    doc.setFontStyle('bold');
    doc.text('Rowspan and colspan', 40, 50);

    let body = bodyRows(40);
    for (var i = 0; i < body.length; i++) {
        var row = body[i];
        if (i % 5 === 0) {
            row['id'] = {rowSpan: 5, content: i / 5 + 1, styles: {valign: 'middle', halign: 'center'}};
        }
    }
    let head = headRows();
    head.unshift({id: {content: 'People', colSpan: 5, styles: {halign: 'center', fillColor: [22, 160, 133]}}});
    
    doc.autoTable({
        startY: 60,
        head: head, 
        body: body,
        theme: 'grid'
    });
    return doc;
};

// Themes - shows how the different themes looks
examples.themes = function () {
    var doc = new jsPDF();
    doc.setFontSize(12);
    doc.setFontStyle('bold');

    doc.text('Theme "striped"', 14, 16);
    doc.autoTable({head: headRows(), body: bodyRows(5), startY: 20});

    doc.text('Theme "grid"', 14, doc.autoTable.previous.finalY + 10);
    doc.autoTable({head: headRows(), body: bodyRows(5), startY: doc.autoTable.previous.finalY + 14, theme: 'grid'});

    doc.text('Theme "plain"', 14, doc.autoTable.previous.finalY + 10);
    doc.autoTable({head: headRows(), body: bodyRows(5), startY: doc.autoTable.previous.finalY + 14, theme: 'plain'});

    return doc;
};

// Custom style - shows how custom styles can be applied
examples.custom = function () {
    var doc = new jsPDF();
    doc.autoTable({
        head: headRows(), body: bodyRows(),
        tableLineColor: [231, 76, 60],
        tableLineWidth: 0.75,
        styles: {
            font: 'courier',
            lineColor: [44, 62, 80],
            lineWidth: 1
        },
        headStyles: {
            fillColor: [44, 62, 80],
            fontSize: 15
        },
        bodyStyles: {
            fillColor: [52, 73, 94],
            textColor: 240
        },
        alternateRowStyles: {
            fillColor: [74, 96, 117]
        },
        columnStyles: {
            email: {
                fontStyle: 'bold'
            }
        },
        eventHandler: function(event) {
            if (event.type === '') {
                
            }
        }
    });
    return doc;
};

/*
 |--------------------------------------------------------------------------
 | Below is some helper functions for the examples
 |--------------------------------------------------------------------------
 */

function headRows() {
    return [{id: 'ID', name: 'Name', email: 'Email', city: 'City', expenses: 'Expenses'}];
}

function footRows() {
    return [{id: 'ID', name: 'Name', email: 'Email', city: 'City', expenses: 'Expenses'}];
}

function bodyRows(rowCount) {
    rowCount = rowCount || 10;
    let body = [];
    for (var j = 1; j <= rowCount; j++) {
        body.push({
            id: j,
            name: faker.name.findName(),
            email: faker.internet.email(),
            city: faker.address.city(),
            expenses: faker.finance.amount(),
        });
    }
    return body;
}

imgToBase64('document.jpg', function(base64) {
    base64Img = base64;
});

// You could either use a function similar to this or pre convert an image with for example http://dopiaza.org/tools/datauri
// http://stackoverflow.com/questions/6150289/how-to-convert-image-into-base64-string-using-javascript
function imgToBase64(url, callback) {
    if (!window.FileReader) {
        callback(null);
        return;
    }
    var xhr = new XMLHttpRequest();
    xhr.responseType = 'blob';
    xhr.onload = function() {
        var reader = new FileReader();
        reader.onloadend = function() {
            callback(reader.result.replace('text/xml', 'image/jpeg'));
        };
        reader.readAsDataURL(xhr.response);
    };
    xhr.open('GET', url);
    xhr.send();
}